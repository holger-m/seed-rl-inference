(
<tf.Tensor: shape=(1,), dtype=int32, numpy=array([0], dtype=int32)>, 
EnvOutput(
reward=<tf.Tensor: shape=(1,), dtype=float32, numpy=array([0.], dtype=float32)>, 
done=<tf.Tensor: shape=(1,), dtype=bool, numpy=array([False])>, 
observation=<tf.Tensor: shape=(1, 210, 160, 3), dtype=uint8, numpy=
array([[[[0, 0, 0],
         [0, 0, 0],
         [0, 0, 0],
         ...,
         [0, 0, 0],
         [0, 0, 0],
         [0, 0, 0]],

        [[0, 0, 0],
         [0, 0, 0],
         [0, 0, 0],
         ...,
         [0, 0, 0],
         [0, 0, 0],
         [0, 0, 0]],

        [[0, 0, 0],
         [0, 0, 0],
         [0, 0, 0],
         ...,
         [0, 0, 0],
         [0, 0, 0],
         [0, 0, 0]],

        ...,

        [[0, 0, 0],
         [0, 0, 0],
         [0, 0, 0],
         ...,
         [0, 0, 0],
         [0, 0, 0],
         [0, 0, 0]],

        [[0, 0, 0],
         [0, 0, 0],
         [0, 0, 0],
         ...,
         [0, 0, 0],
         [0, 0, 0],
         [0, 0, 0]],

        [[0, 0, 0],
         [0, 0, 0],
         [0, 0, 0],
         ...,
         [0, 0, 0],
         [0, 0, 0],
         [0, 0, 0]]]], dtype=uint8)>, 
abandoned=<tf.Tensor: shape=(1,), dtype=bool, numpy=array([False])>, 
episode_step=<tf.Tensor: shape=(1,), dtype=int32, numpy=array([0], dtype=int32)>
)
)
